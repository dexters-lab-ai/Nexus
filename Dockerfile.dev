# Development stage
FROM node:18.20.3-bullseye-slim

# Create app directory
WORKDIR /usr/src/app

# Install system dependencies including Chrome
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    gcc \
    gcc-8 \
    g++-8 \
    git \
    curl \
    python-is-python3 \
    chromium \
    fonts-liberation \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libc6 \
    libcairo2 \
    libcups2 \
    libdbus-1-3 \
    libdrm2 \
    libexpat1 \
    libgbm1 \
    libgcc1 \
    libglib2.0-0 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libpango-1.0-0 \
    libx11-6 \
    libxcb1 \
    libxcomposite1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxrandr2 \
    xdg-utils \
    --no-install-recommends \
    && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 80 \
    --slave /usr/bin/g++ g++ /usr/bin/g++-8 \
    && rm -rf /var/lib/apt/lists/*

# Set Puppeteer environment variables
ENV CHROME_BIN=/usr/bin/chromium-browser
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true

# Set environment to development
ENV NODE_ENV=development
ENV DOCKER=true
ENV HOST=0.0.0.0
ENV VITE_DEV_SERVER_HOST=0.0.0.0

# Copy package files first for better layer caching
COPY package*.json ./
COPY yarn.lock* ./

# Install all dependencies (including devDependencies)
# Clean npm cache and reinstall node-gyp
RUN npm cache clean --force && \
    npm install -g node-gyp && \
    npm install --legacy-peer-deps --build-from-source && \
    npm rebuild bcrypt --build-from-source && \
    npm install @rollup/rollup-linux-x64-gnu --save-dev

# Copy environment files
COPY .env* ./

# Create necessary directories with correct permissions
RUN mkdir -p nexus_run && \
    mkdir -p public/assets && \
    mkdir -p public/models && \
    mkdir -p public/textures && \
    chown -R node:node /usr/src/app && \
    chmod -R 755 /usr/src/app/nexus_run

# Copy the rest of the application with correct permissions
COPY --chown=node:node . .

# Set environment to use the correct Rollup binary
ENV ROLLUP_INLINE_RUN=1

# Switch to non-root user
USER node

# Expose ports
EXPOSE 3000 3420 24678

# Set healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000 || exit 1

# Start both frontend and backend in development mode
CMD ["npm", "run", "dev"]
