version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production  # Ensure we're using the production stage from Dockerfile
    environment:
      - NODE_ENV=production
      - DOCKER=true
      # Puppeteer/Chromium settings
      - CHROME_BIN=/usr/bin/chromium-browser
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
      # Node.js memory settings
      - NODE_OPTIONS=--max-old-space-size=4096
    restart: unless-stopped
    # Explicitly set the command to ensure it's using the production build
    command: node --max-old-space-size=4096 server.js
    # Resource limits - increased for Chromium
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G  # Increased to 4GB as requested
    # Health check with curl (lighter than wget)
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3420/api/health', r => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Configure logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"
    # Security options
    security_opt:
      - no-new-privileges:true
    # Shared memory settings for Chromium
    shm_size: 1gb
    # Port mappings
    ports:
      - "3420:3420"  # Backend API
      # Frontend should be served separately (e.g., via Nginx or CDN)
    # Volumes for persistent data
    volumes:
      - ./nexus_run:/usr/src/app/nexus_run
      - ./logs:/usr/src/app/logs
    # DNS configuration for better network performance
    dns:
      - 1.1.1.1
      - 8.8.8.8
    # Set ulimits for better stability
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
